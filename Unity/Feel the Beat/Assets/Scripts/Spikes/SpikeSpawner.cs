using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SpikeSpawner : MonoBehaviour
{

    public GameObject spike;
    public GameObject player;
    public GameObject coin;
    public AudioSource audioSource;

    private float distanceBetweenSpike = 6f;

    float randX;
    Vector2 whereToSpawn;
    public float spawnRate = 2f;
    float nextSpawn = 0.0f;

    float startTime;
    List<float> arrayOfSpikes = new List<float> {
        0.342194f, 0.457636f, 0.640022f, 1.319654f, 1.865568f, 2.362765f, 2.909915f, 3.307876f, 4.169101f, 4.632268f, 5.21202f, 5.8915f, 6.355772f, 6.93548f, 7.299575f, 7.880235f, 9.022371f, 10.06678f, 10.46451f, 11.29293f, 11.60678f, 12.53777f, 12.83657f, 13.39907f, 14.44274f, 14.84052f, 15.80084f, 16.82797f, 17.97008f, 19.01158f, 19.58457f, 20.53263f, 20.83101f, 21.6925f, 22.8348f, 23.9806f, 25.11581f, 25.41887f, 26.15374f, 27.13514f, 27.68302f, 28.51985f, 29.38176f, 30.69547f, 31.09416f, 31.50863f, 31.80722f, 31.9558f, 32.12148f, 33.09864f, 33.94923f, 34.23148f, 34.4847f, 34.76625f, 35.00292f, 35.27774f, 35.60173f, 35.95212f, 36.30054f, 36.80403f, 37.08564f, 37.33628f, 37.64996f, 37.9534f, 38.18509f, 38.30106f, 38.49933f, 38.80611f, 39.03871f, 39.32025f, 39.45656f, 39.74901f, 39.97205f, 40.23667f, 40.52272f, 40.80501f, 40.9916f, 41.23991f, 41.38828f, 41.63766f, 41.93794f, 42.17099f, 42.47226f, 42.80597f, 43.07197f, 43.3523f, 43.65395f, 43.96782f, 44.1166f, 44.38195f, 44.69779f, 45.0024f, 45.26747f, 45.5654f, 45.81489f, 45.93113f, 46.2319f, 46.41487f, 46.68035f, 46.93123f, 47.09697f, 47.26259f, 47.39982f, 47.64828f, 47.94958f, 48.22427f, 48.5111f, 48.72651f, 48.94439f, 49.283f, 49.36586f, 49.5768f, 49.83254f, 50.11451f, 50.35064f, 50.50001f, 50.8058f, 50.98773f, 51.26885f, 51.50356f, 51.66903f, 51.83494f, 51.95414f, 52.15403f, 52.53735f, 52.80158f, 53.06134f, 53.36411f, 53.54824f, 53.66967f, 53.85262f, 53.9355f, 54.17864f, 54.40549f, 54.68676f, 54.80688f, 54.98936f, 55.08936f, 55.33532f, 55.54199f, 55.85661f, 56.10809f, 56.38422f, 582386f, 56.80644f, 57.0375f, 57.42942f, 57.66158f, 57.84454f, 57.94338f, 58.12529f, 58.24385f, 58.41827f, 58.51706f, 58.75842f, 58.89098f, 58.99017f, 59.2549f, 59.37967f, 59.66134f, 59.89272f, 60.12743f, 60.37658f, 60.69619f, 60.79559f, 60.92747f, 61.02757f, 61.37465f, 61.60632f, 61.89462f, 62.23164f, 62.4131f, 62.51279f, 62.69476f, 62.81282f, 62.92845f, 63.09348f, 63.34349f, 63.55611f, 63.83014f, 63.95143f, 64.23418f, 64.46606f, 64.78301f, 65.08716f, 65.40661f, 65.65553f, 65.83852f, 66.11968f, 66.22049f, 680246f, 66.70118f, 66.96967f, 67.08579f, 67.368f, 67.65014f, 67.88258f, 68.13461f, 68.41705f, 68.71542f, 68.79787f, 69.05167f, 69.36739f, 69.63558f, 69.93571f, 70.16795f, 70.43665f, 70.71825f, 71.11053f, 71.69336f, 71.94225f, 72.2246f, 72.50529f, 72.70504f, 72.99152f, 73.19069f, 73.2903f, 73.37241f, 73.57134f, 73.92255f, 74.21314f, 74.97977f, 75.26096f, 75.38028f, 75.91393f, 76.22939f, 76.81829f, 77.56433f, 77.95012f, 78.5241f, 78.81181f, 79.09335f, 79.36839f, 79.67778f, 79.95348f, 80.21853f, 80.41688f, 80.60354f, 80.70209f, 80.96707f, 81.20349f, 81.39365f, 81.57704f, 81.85363f, 82.13525f, 82.41925f, 82.53499f, 82.71722f, 82.80436f, 82.98687f, 83.26847f, 83.59551f, 83.8992f, 84.23051f, 84.52366f, 84.80515f, 85.09034f, 85.27218f, 85.52156f, 85.65882f, 85.85768f, 85.94048f, 86.17258f, 86.40617f, 86.71644f, 86.80856f, 87.07468f, 87.34019f, 87.57311f, 87.85474f, 88.12437f, 88.39973f, 88.52667f, 88.80074f, 89.024f, 89.35539f, 89.60359f, 89.84402f, 90.12551f, 90.24679f, 90.51093f, 90.74376f, 90.97502f, 91.28964f, 91.3788f, 91.66061f, 91.91263f, 92.14528f, 92.41639f, 92.68188f, 92.91333f, 93.0979f, 93.37912f, 93.64774f, 93.95467f, 94.21233f, 94.41025f, 94.69695f, 94.98237f, 95.09872f, 95.33293f, 95.54832f, 95.83102f, 95.95171f, 96.23296f, 982007f, 96.99226f, 97.36788f, 97.66869f, 97.95089f, 98.21855f, 98.46677f, 98.99265f, 99.37208f, 99.6692f, 99.92203f, 100.1372f, 100.4195f, 100.5059f, 100.7874f, 101.0899f, 101.3542f, 101.6391f, 102.4211f, 102.8069f, 103.1055f, 103.305f, 103.6399f, 103.9207f, 104.7062f, 104.9812f, 105.4711f, 105.6587f, 105.9428f, 106.1913f, 106.9727f, 107.2871f, 108.2083f, 108.51f, 109.277f, 109.6661f, 110.4164f, 110.6476f, 110.9514f, 111.0829f, 111.1827f, 111.3019f, 111.5847f, 111.849f, 111.9524f, 112.2339f, 112.4861f, 112.7834f, 113.0026f, 113.1196f, 113.3724f, 113.6055f, 113.854f, 114.128f, 114.2322f, 114.5332f, 114.7888f, 115.0833f, 115.3911f, 115.6729f, 115.9417f, 116.2402f, 118252f, 116.808f, 117.1742f, 117.4065f, 117.776f, 118.0516f, 118.1421f, 118.3079f, 118.5733f, 118.6891f, 118.8751f, 119.0845f, 119.167f, 119.3532f, 119.4697f, 119.6344f, 119.7727f, 119.8784f, 119.9616f, 120.0774f, 120.1778f, 120.5451f, 120.7928f, 121.0467f, 121.3274f, 121.5597f, 121.8136f, 121.9288f, 122.1284f, 122.2309f, 122.4466f, 122.5626f, 122.7296f, 122.8126f, 123.0944f, 123.211f, 123.4135f, 123.4961f, 123.6466f, 123.982f, 124.2882f, 124.5794f, 124.6958f, 124.8373f, 125.0533f, 125.1355f, 125.3676f, 125.5862f, 125.8181f, 126.0831f, 126.1693f, 126.435f, 126.6946f, 126.8179f, 127.132f, 127.4679f, 127.733f, 127.8165f, 128.0339f, 128.1335f, 128.2501f, 128.434f, 128.9736f, 129.294f, 129.6674f, 130.016f, 130.2717f, 130.4376f, 130.7551f, 130.9206f, 131.0197f, 131.3887f, 131.6369f, 132.1887f, 132.7056f, 133.0726f, 133.6405f, 134.1998f, 134.945f, 135.3773f, 136.2412f, 138889f, 136.8206f, 137.3684f, 137.9143f, 138.3982f, 138.5807f, 139.055f, 139.4202f, 139.8806f, 140.4481f, 140.8788f, 141.2123f, 141.4947f, 141.7427f, 141.9581f, 142.8035f, 143.0853f, 143.3667f, 143.5988f, 143.9297f, 144.0959f, 144.2284f, 144.5756f, 144.8076f, 145.1129f, 145.3447f, 145.6966f, 145.9294f, 146.2167f, 14806f, 146.7872f, 147.0191f, 147.2019f, 147.45f, 147.732f, 147.9639f, 148.2611f, 148.5437f, 148.6597f, 148.8915f, 149.073f, 149.3381f, 149.6776f, 149.844f, 150.5347f, 150.771f, 151.1213f, 151.3042f, 151.6516f, 152.0021f, 152.1955f, 152.2615f, 152.4036f, 152.6365f, 153.1193f, 153.487f, 153.7214f, 153.9859f, 154.2061f, 154.448f, 154.6181f, 154.7012f, 154.784f, 155.3262f, 155.9584f, 156.6744f, 157.2584f, 157.8086f, 157.9573f, 158.227f, 158.5029f, 159.0583f, 159.6675f, 160.1386f, 160.5312f, 160.8129f, 160.9946f, 161.3932f, 161.6133f, 161.9493f, 162.5276f, 163.1253f, 163.4081f, 163.712f, 163.8566f, 164.254f, 164.5366f, 164.7519f, 164.834f, 165.1157f, 165.3809f, 165.6821f, 165.958f, 166.1663f, 166.2489f, 166.4485f, 168313f, 166.8317f, 167.0301f, 167.1136f, 167.3983f, 167.6973f, 167.9453f, 168.1605f, 168.4426f, 168.5589f, 168.8073f, 169.1047f, 169.3044f, 169.436f, 169.6019f, 169.9504f, 170.1161f, 170.249f, 170.5498f, 170.8325f, 171.1173f, 171.3813f, 171.5978f, 171.8826f, 172.1472f, 172.2676f, 172.4824f, 173.0158f, 173.4006f, 173.6338f, 173.8668f, 174.1737f, 174.5548f, 175.12f, 175.3529f, 175.7052f, 175.978f, 176.4527f, 176.8392f, 177.2221f, 177.5871f, 177.9903f, 178.2383f, 178.721f, 179.6836f, 180.2747f, 181.0312f, 181.2969f, 181.4118f, 181.6448f, 181.8804f, 182.1619f, 182.4105f, 182.5599f, 182.8079f, 183.0278f, 183.2764f, 183.5944f, 183.6935f, 183.9787f, 184.2501f, 184.5606f, 184.8379f, 185.1306f, 185.3128f, 185.4118f, 185.5777f, 185.8299f, 185.988f, 186.2699f, 186.4358f, 186.7481f, 187.0142f, 187.1302f, 187.3842f, 187.6401f, 187.8727f, 188.1548f, 188.2764f, 188.5483f, 188.827f, 189.1559f, 189.4055f, 189.6706f, 189.8972f, 190.153f, 190.4511f, 190.5667f, 190.8038f, 191.0332f, 191.3035f, 192.2674f, 192.5689f, 192.8511f, 193.0694f, 193.3023f, 193.5879f, 193.7037f, 193.9852f, 194.1709f, 194.5473f, 194.8127f, 195.1157f, 195.3553f, 195.5881f, 195.8707f, 196.1025f, 196.2518f, 196.7373f, 196.8397f, 197.1213f, 197.403f, 197.6532f, 197.8802f, 198.1533f, 198.4014f, 198.5581f, 198.6566f, 198.8393f, 198.9553f, 199.1072f, 199.3984f, 199.6862f, 199.9346f, 200.1522f, 200.4394f, 200.6887f, 200.8271f, 201.0916f, 201.4118f, 201.6927f, 202.4625f, 202.8443f, 203.6808f, 203.9948f, 204.7386f, 205.0433f, 205.4137f, 205.9813f, 206.2579f, 208335f, 206.8265f, 207.1317f, 207.3969f, 207.6812f, 207.9897f, 208.0832f, 208.2827f, 208.382f, 208.618f, 208.8831f, 209.1673f, 209.4757f, 209.7778f, 210.0485f, 210.3348f, 210.567f, 210.8873f, 210.9859f, 211.1189f, 211.4223f, 211.7039f, 211.9559f, 212.1717f, 212.4033f, 212.5576f, 212.7391f, 213.0215f, 213.1416f, 213.4228f, 213.6899f, 213.9554f, 214.154f, 214.4548f, 214.741f, 214.9741f, 215.3487f, 215.6465f, 215.951f, 216.2766f, 216.4513f, 216.7153f, 216.9999f, 217.2655f, 217.6178f, 217.7174f, 217.8499f, 217.9475f, 218.2671f, 218.4824f, 218.8323f, 219.1299f, 219.3188f, 219.5497f, 219.8532f, 220.1341f, 220.2668f, 220.5379f, 220.7544f, 220.9933f, 221.2914f, 221.5615f, 221.826f, 222.1771f, 222.2595f, 222.4746f, 222.5794f, 222.8454f, 223.1268f, 223.3787f, 223.6137f, 223.7466f, 223.8946f, 224.1277f, 224.3972f, 224.5629f, 224.849f, 225.1138f, 225.3996f, 225.6533f, 225.8847f, 226.1729f, 226.4713f, 228588f, 226.8394f, 227.1242f, 227.3558f, 227.599f, 227.6904f, 227.84f, 228.1547f, 228.3909f, 228.7419f, 229.0239f, 229.1329f, 229.2821f, 229.4087f, 229.6911f, 229.9752f, 230.2772f, 230.4673f, 230.5501f, 230.7322f, 230.8317f, 231.1191f, 231.4163f, 231.6843f, 231.9994f, 232.2677f, 232.5492f, 232.7533f, 232.8536f, 232.986f, 233.2865f, 233.4025f, 233.6953f, 233.986f, 234.2681f, 234.5678f, 234.8495f, 235.1348f, 235.3211f, 235.6442f, 235.9584f, 236.2602f, 23876f, 236.7618f, 236.8443f, 237.1252f, 237.312f, 237.5943f, 237.8946f, 237.9785f, 238.1771f, 238.4453f, 238.7434f, 238.8474f, 239.0293f, 239.1293f, 239.3982f, 239.6801f, 239.8946f, 239.9973f, 240.2628f, 240.544f, 240.8414f, 241.0905f, 241.3055f, 241.4226f, 241.6733f, 241.8894f, 242.1213f, 242.4721f, 242.5556f, 242.8411f, 243.1202f, 243.4239f, 243.606f, 243.6889f, 243.9733f, 244.2719f, 244.4595f, 244.7248f, 245.0272f, 245.1431f, 245.3968f, 245.6522f, 246.0001f, 246.2698f, 248345f, 247.3885f
        //0.275347f, 0.308452f, 0.374697f, 0.6259611f, 0.7091711f, 0.808249f, 1.761126f, 2.357619f, 3.106719f, 3.885527f, 4.467199f, 5.167794f, 5.631659f, 6.028151f, 6.790886f, 7.188091f, 8.748798f, 9.146298f, 10.29772f, 10.69444f, 11.48625f, 11.88321f, 12.64567f, 13.71352f, 14.22681f, 15.1711f, 15.75049f, 16.1483f, 16.84482f, 17.34097f, 18.10285f, 18.50142f, 19.26343f, 19.66111f, 20.05841f, 20.45588f, 21.21853f, 21.61584f, 22.77588f, 23.55492f, 24.35053f, 25.11177f, 25.5098f, 25.90676f, 26.30493f, 26.8847f, 27.54737f, 28.01108f, 28.40855f, 29.31955f, 29.78417f, 30.18162f, 30.57943f, 31.73845f, 32.13675f, 33.28206f, 33.67953f, 34.38009f, 35.46713f, 36.82626f, 37.48985f, 37.98753f, 38.18662f, 39.13416f, 39.5328f, 39.74714f, 39.93017f, 40.32692f, 40.62541f, 41.07314f, 41.47851f, 41.8093f, 42.19039f, 42.65473f, 43.00294f, 43.38308f, 43.76798f, 44.1557f, 44.52095f, 44.97055f, 45.38788f, 45.75151f, 46.14934f, 483008f, 46.77839f, 46.92741f, 47.29249f, 47.62292f, 48.06137f, 48.69187f, 48.98442f, 49.18425f, 49.30613f, 49.67199f, 49.97028f, 50.25193f, 50.43394f, 50.84957f, 51.1674f, 51.59824f, 51.98285f, 53.17525f, 53.83188f, 54.2397f, 54.44007f, 54.80014f, 55.38039f, 55.72727f, 56.17542f, 56.49346f, 56.95824f, 57.28969f, 57.75356f, 58.1179f, 58.49912f, 58.7637f, 58.91324f, 59.21081f, 59.62524f, 60.00656f, 60.37047f, 61.41375f, 62.40847f, 62.80536f, 63.96508f, 64.76109f, 65.15822f, 65.55627f, 66.31746f, 66.64977f, 67.01377f, 67.70973f, 68.19308f, 68.30905f, 68.42506f, 68.65626f, 69.43544f, 69.80009f, 70.59469f, 70.98333f, 71.38142f, 71.77834f, 72.17578f, 72.93851f, 73.33557f, 74.09802f, 74.42864f, 74.89295f, 75.39047f, 75.67211f, 76.43603f, 77.2315f, 77.62893f, 78.25818f, 78.80481f, 79.10368f, 79.55023f, 79.94791f, 80.34479f, 80.69344f, 81.5052f, 81.90208f, 82.29124f, 82.87277f, 83.45161f, 83.84945f, 84.61239f, 85.00944f, 85.40741f, 85.80513f, 86.12519f, 86.95354f, 87.35114f, 87.93099f, 88.26218f, 88.908f, 89.30505f, 90.46552f, 90.86375f, 91.55898f, 91.84036f, 92.15519f, 92.8089f, 93.2103f, 93.50945f, 93.79057f, 93.97309f, 94.32053f, 94.66871f, 95.0663f, 95.34842f, 96.29436f, 96.89114f, 97.4875f, 98.2663f, 99.05885f, 99.87128f, 100.6171f, 101.3794f, 102.1704f, 102.568f, 104.0941f, 104.4918f, 105.2874f, 106.0654f, 106.8446f, 108.013f, 108.7915f, 109.9044f, 110.3645f, 111.2747f, 111.9338f, 112.637f, 113.018f, 113.4148f, 113.8122f, 114.2104f, 114.5746f, 114.9552f, 115.188f, 116.1983f, 118463f, 117.3245f, 117.6897f, 118.8825f, 119.1966f, 119.6438f, 120.2411f, 120.8205f, 121.1685f, 121.5996f, 121.9142f, 122.361f, 122.7254f, 123.1397f, 123.5372f, 123.9165f, 124.4337f, 124.6659f, 124.8841f, 125.0666f, 125.2337f, 125.4163f, 125.6645f, 125.8361f, 127.0036f, 127.3895f, 127.7664f, 128.1144f, 128.9537f, 129.344f, 129.6914f, 130.0584f, 130.4292f, 130.5284f, 130.8772f, 131.2261f, 131.624f, 132.0043f, 132.4246f, 132.7565f, 133.2037f, 133.597f, 134.0109f, 134.331f, 134.4806f, 134.7294f, 135.1431f, 135.5743f, 135.8892f, 136.3119f, 136.6763f, 137.0571f, 137.173f, 137.5212f, 137.8696f, 138.2674f, 138.6151f, 139.0949f, 139.4595f, 139.7748f, 140.2547f, 140.5529f, 141.0168f, 141.3644f, 141.7464f, 142.5946f, 143.1763f, 143.5573f, 143.7554f, 143.9545f, 144.1538f, 144.2697f, 144.5513f, 144.7332f, 144.9152f, 145.3127f, 145.5282f, 145.6934f, 146.2901f, 146.8707f, 148.0335f, 148.4319f, 148.8297f, 149.955f, 151.5443f, 152.3225f, 152.8592f, 153.4731f, 153.8206f, 154.2181f, 154.5829f, 154.9798f, 155.3781f, 155.726f, 156.0234f, 156.2388f, 158045f, 157.1841f, 157.7799f, 158.5598f, 159.5064f, 159.7219f, 160.0672f, 160.8065f, 161.2214f, 161.6404f, 162.0684f, 162.3606f, 162.8074f, 163.2222f, 163.5529f, 163.9169f, 164.0329f, 164.3651f, 164.796f, 165.1438f, 165.5415f, 165.9225f, 166.0716f, 166.3527f, 166.6835f, 167.1144f, 167.4803f, 167.5995f, 168.0596f, 168.2747f, 168.59f, 169.0366f, 169.3854f, 169.7328f, 170.1471f, 170.5776f, 170.9421f, 171.7834f, 172.1648f, 172.7616f, 173.3415f, 174.2685f, 175.2887f, 175.6843f, 176.2154f, 176.4467f, 176.8443f, 177.2278f, 177.5103f, 178.2552f, 179.1789f, 179.5838f, 180.0882f, 180.3154f, 180.7442f, 180.95f, 181.1319f, 181.5065f, 181.9544f, 182.3232f, 182.6884f, 182.8366f, 183.0685f, 183.4661f, 183.6157f, 183.848f, 184.2751f, 184.6235f, 184.9711f, 185.32f, 185.6342f, 185.7833f, 186.0809f, 186.1814f, 188293f, 186.7771f, 186.9601f, 187.2912f, 187.6879f, 187.8878f, 188.1186f, 188.4505f, 188.5504f, 189.1966f, 189.5601f, 189.6597f, 189.9611f, 190.1012f, 190.6566f, 190.872f, 191.4031f, 192.0331f, 192.4141f, 192.728f, 193.2173f, 193.5847f, 193.9729f, 194.2724f, 194.3714f, 194.7029f, 195.1337f, 195.5101f, 196.7065f, 197.0674f, 197.3981f, 197.8463f, 198.2104f, 198.6257f, 198.808f, 199.0231f, 199.357f, 199.8043f, 200.1587f, 200.5846f, 200.9806f, 201.3626f, 201.7095f, 202.1127f, 202.4832f, 202.8338f, 202.9494f, 203.2309f, 203.5464f, 203.7117f, 204.1092f, 204.4412f, 204.8224f, 205.2193f, 205.6176f, 206.0649f, 206.429f, 206.7602f, 207.1243f, 207.5389f, 207.9742f, 208.3285f, 208.7254f, 209.0735f, 209.5342f, 209.8615f, 210.2581f, 210.6735f, 211.0536f, 211.4854f, 211.8002f, 212.2134f, 212.6285f, 213.0418f, 213.4232f, 213.7879f, 214.2044f, 214.5196f, 214.6351f, 214.8842f, 215.0006f, 215.3485f, 215.795f, 216.1106f, 21858f, 216.7565f, 216.9224f, 217.2361f, 217.3522f, 217.6505f, 218.1145f, 218.3965f, 218.5119f, 218.8607f, 219.6889f, 220.0918f, 220.8454f, 221.6241f, 222.32f, 222.6182f, 223.2896f, 223.9687f, 224.3496f, 224.7211f, 225.0695f, 225.451f, 225.8485f, 226.2458f, 226.677f, 227.0735f, 227.4052f, 227.8697f, 228.1838f, 229.0452f, 229.426f, 229.6089f, 229.7246f, 230.2049f, 230.5538f, 231.0007f, 231.7628f, 232.1603f, 232.5573f, 233.3035f, 234.0821f, 234.595f, 235.2746f, 235.5733f, 236.0372f, 237.4942f, 238.107f, 239.6155f, 241.0557f, 241.537f, 243.0937f   
    };
    List<float> forGettingNewSongData = new List<float>();

    // Start is called before the first frame update
    void Start()
    {
        AudioProcessor processor = FindObjectOfType<AudioProcessor>();
        processor.onBeat.AddListener(onOnbeatDetected);

        startTime = Time.time;

        arrayOfSpikes = filtering(arrayOfSpikes);

        foreach (float x in arrayOfSpikes)
        {
            whereToSpawn = new Vector2(x * distanceBetweenSpike, transform.position.y);
            Instantiate(spike, whereToSpawn, Quaternion.identity);

            Vector2 whereToSpawnCoinAboveSpike = new Vector2(x * distanceBetweenSpike, transform.position.y + 2f);
            Instantiate(coin, whereToSpawnCoinAboveSpike, Quaternion.identity);
        }

        for (int i = 0; i < arrayOfSpikes.Count; i++)
        {
            if (i != (arrayOfSpikes.Count - 1))
            {
                float spike1X = arrayOfSpikes[i] * distanceBetweenSpike;
                float spike2X = arrayOfSpikes[i + 1] * distanceBetweenSpike;

                if (Mathf.Abs(spike1X - spike2X) < 3f)
                {
                    //This is the function that put coins in the middle???? WWHHYYYYY?
                    Vector2 spawnOnCoin = new Vector2((spike1X + spike2X) / 2.0f, transform.position.y + 1f);
                    Instantiate(coin, spawnOnCoin, Quaternion.identity);
                }
                else if (Mathf.Abs(spike1X - spike2X) < distanceBetweenSpike)
                {
                    Vector2 spawnInBetweenTheSpike = new Vector2(spike1X + (float)(Mathf.Abs(spike1X - spike2X) / 2.0), transform.position.y + 1f);
                    Instantiate(coin, spawnInBetweenTheSpike, Quaternion.identity);
                }
                else
                {
                    //Spawn 3 coins in a row
                    Vector2 coin1 = new Vector2(spike1X + (float)(Mathf.Abs(spike1X - spike2X) / 2.0) - 1.5f, transform.position.y);
                    Vector2 coin2 = new Vector2(spike1X + (float)(Mathf.Abs(spike1X - spike2X) / 2.0), transform.position.y);
                    Vector2 coin3 = new Vector2(spike1X + (float)(Mathf.Abs(spike1X - spike2X) / 2.0) + 1.5f, transform.position.y);

                    Instantiate(coin, coin1, Quaternion.identity);
                    Instantiate(coin, coin2, Quaternion.identity);
                    Instantiate(coin, coin3, Quaternion.identity);
                }
            }
        }

        //for (int i = 0; i < 1000; i++)
        //{
        //    //Make some coin along the way, the coin should not be at the same location as the spikes
        //    float startRange = arrayOfSpikes[0];
        //    float endRange = arrayOfSpikes[arrayOfSpikes.Count - 1];
        //    float randomXForCoin = Random.Range(startRange, endRange) * 2f;
        //    bool shouldBeSpawn = shouldCoinBeSpawn(randomXForCoin);
        //    if (shouldBeSpawn)
        //    {
        //        Vector2 whereToSpawnCoinOnGround = new Vector2(randomXForCoin, transform.position.y + 1f);
        //        Instantiate(coin, whereToSpawnCoinOnGround, Quaternion.identity);
        //    }
        //}
    }

    //private bool shouldCoinBeSpawn(float coordinate)
    //{
    //    int count = 0;
    //    foreach (float x in arrayOfSpikes)
    //    {
    //        if (Mathf.Abs(coordinate - x) < 1f)
    //        {
    //            return false;
    //        }
    //        else
    //        {
    //            count++;
    //            if (count >= 5)
    //            {
    //                return true;
    //            }
    //        }
    //    }
    //    return true;
    //}

    void onOnbeatDetected()
    {
        forGettingNewSongData.Add(Time.time - startTime);
    }

    private List<float> filtering(List<float> arrays)
    {
        List<List<float>> breakdown = new List<List<float>>();
        int baseNumber = 0;
        List<float> baseTime = new List<float>();
        foreach (float x in arrays)
        {
            if (baseNumber == (int)x)
            {
                baseTime.Add(x);
            }
            else
            {
                baseNumber += 1;
                breakdown.Add(baseTime);
                baseTime = new List<float>();
                baseTime.Add(x);
            }
        }

        List<float> result = new List<float>();
        foreach (List<float> member in breakdown)
        {
            int r = Random.Range(0, member.Count);
            result.Add(member[r]);
            //print(member[r]);
        }

        List<float> newResult = new List<float>();
        for (int x = 0; x < result.Count - 1; x++)
        {
            if (Mathf.Abs(result[x] - result[x + 1]) < 0.5f)
            {
                
            }
            else
            {
                newResult.Add(result[x]);
                x++;
            }
        }

        return newResult;
    }

    private float[] samples = new float[512];

    // Update is called once per frame
    void Update()
    {
        //if (Time.time > nextSpawn)
        //{
        //    nextSpawn = Time.time + spawnRate;
        //    randX = Random.Range(player.transform.position.x - 3.0f, player.transform.position.x + 6.8f);
        //    whereToSpawn = new Vector2(randX, transform.position.y);
        //    Instantiate(spike, whereToSpawn, Quaternion.identity);
        //}
        if (!audioSource.isPlaying)
        {
            print(string.Join("f, ", forGettingNewSongData));
        }

        audioSource.GetSpectrumData(samples, 0, FFTWindow.Blackman);
    }
}
